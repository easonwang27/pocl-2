#### Compiling pocl on RiscV ####

## Dependencies:

- sudo apt-get -y install \
  binutils build-essential libtool texinfo \
  gzip zip unzip patchutils curl git \
  make cmake ninja-build automake bison flex gperf \
  grep sed gawk python bc \
  zlib1g-dev libexpat1-dev libmpc-dev \
  libglib2.0-dev libfdt-dev libpixman-1-dev       
 
## Building RiscV GNU Toolchain (gcc, binutils, etc..)

- git clone https://github.com/riscv/riscv-gnu-toolchain
- cd riscv-gnu-toolchain
- git submodule update --init --recursive
- mkdir build
- cd build
- export RISC_GNU_TOOLS_PATH=$PWD/../drops
- newlib: ../configure --prefix=$RISC_GNU_TOOLS_PATH --with-arch=rv32im --with-abi=ilp32
- linux: ../configure --prefix=$RISC_GNU_TOOLS_PATH --with-arch=rv32ima --with-abi=ilp32
- make -j`nproc` && make -j`nproc` build-qemu

## Building LLVM for RiscV

- git clone -b release/10.x https://github.com/llvm/llvm-project.git llvm
- cd llvm
- mkdir build
- cd build
- newlib: cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_PROJECTS="clang" -DBUILD_SHARED_LIBS=True -DLLVM_USE_SPLIT_DWARF=True -DCMAKE_INSTALL_PREFIX=$RISC_GNU_TOOLS_PATH -DLLVM_OPTIMIZED_TABLEGEN=True -DLLVM_BUILD_TESTS=True -DDEFAULT_SYSROOT=$RISC_GNU_TOOLS_PATH/riscv32-unknown-elf -DLLVM_DEFAULT_TARGET_TRIPLE="riscv32-unknown-elf" -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm
- linux: cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_PROJECTS="clang" -DBUILD_SHARED_LIBS=True -DLLVM_USE_SPLIT_DWARF=True -DCMAKE_INSTALL_PREFIX=$RISC_GNU_TOOLS_PATH -DLLVM_OPTIMIZED_TABLEGEN=True -DLLVM_BUILD_TESTS=True -DDEFAULT_SYSROOT=$RISC_GNU_TOOLS_PATH/sysroot  -DLLVM_DEFAULT_TARGET_TRIPLE="riscv32-unknown-linux-gnu" -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm
- cmake --build . --target install

## (optional) register llvm pretty print extension for gdb: add "source $LLVM_PATH/utils/gdb-scripts/prettyprinters.py" to ~/.gdbinit 

## Sanity test your new RISC-V LLVM

- cat hello.c
#include <stdio.h>
int main(int argc, char **argv) { printf("hello world\n"); }
- clang hello.c
- qemu-riscv32 hello

## build pocl for Vortex

- git clone https://github.gatech.edu/casl/pocl.git
- cd pocl
- export RISC_GNU_TOOLS_PATH=~/dev/riscv-gnu-toolchain/drops
- export VORTEX_DRIVER_INC=~/dev/vortex_live/driver/sw/include
- export VORTEX_DRIVER_LIB=~/dev/vortex_live/driver/sw/simx/libvortex.so
- export VORTEX_RUNTIME_PATH=/home/blaise/dev/vortex_live/runtime

- mkdir build_vortex_rt
- cd build_vortex_rt
- export POCL_RT_PATH=$PWD/../drops_vortex_rt
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_RT_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=OFF -DHOST_DEVICE_BUILD_HASH=riscv32-unknown-unknown-elf -DENABLE_VORTEX=ON -DVORTEX_DRIVER_INC=$VORTEX_DRIVER_INC -DVORTEX_DRIVER_LIB=$VORTEX_DRIVER_LIB -DVORTEX_RUNTIME_PATH=$VORTEX_RUNTIME_PATH -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON ..
- cmake --build . --target install

- mkdir build_vortex_cc
- cd build_vortex_cc
- export POCL_CC_PATH=$PWD/../drops_vortex_cc
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_CC_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=ON -DWITH_LLVM_CONFIG=$RISC_GNU_TOOLS_PATH/bin/llvm-config -DENABLE_VORTEX=ON -DVORTEX_DRIVER_INC=$VORTEX_DRIVER_INC -DVORTEX_DRIVER_LIB=$VORTEX_DRIVER_LIB -DVORTEX_RUNTIME_PATH=$VORTEX_RUNTIME_PATH -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON ..
- cmake --build . --target install

## build pocl for x86

- mkdir build_x86
- cd build_x86
- export POCL_RT_PATH=$PWD/../drops_x86
- export RISC_GNU_TOOLS_PATH=/usr/lib/llvm-9
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_RT_PATH -DCMAKE_BUILD_TYPE=Debug -DSINGLE_LLVM_LIB=ON -DWITH_LLVM_CONFIG=$RISC_GNU_TOOLS_PATH/bin/llvm-config -DENABLE_VORTEX=ON -DVORTEX_DRIVER_INC=~/dev/vortex_opae/driver/sw/vx_driver.h -DVORTEX_DRIVER_LIB=~/dev/vortex_opae/driver/sim/obj_dir/libvxdrv_sim.so -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON ..
- cmake --build . --target install