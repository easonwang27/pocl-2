#### Compiling pocl on RiscV ####

## Dependencies:

- sudo apt-get -y install \
  binutils build-essential libtool texinfo \
  gzip zip unzip patchutils curl git \
  make cmake ninja-build automake bison flex gperf \
  grep sed gawk python bc \
  zlib1g-dev libexpat1-dev libmpc-dev \
  libglib2.0-dev libfdt-dev libpixman-1-dev       
 
## Building RiscV GNU Toolchain (gcc, binutils, etc..)

- git clone https://github.com/riscv/riscv-gnu-toolchain
- cd riscv-gnu-toolchain
- git submodule update --init --recursive
- mkdir build
- cd build
- export RISCV_GNU_TOOLS_PATH=$PWD/../drops
- ../configure --prefix=$RISCV_GNU_TOOLS_PATH --with-arch=rv32im --with-abi=ilp32
- make -j`nproc` && make -j`nproc` build-qemu

## Building LLVM for RiscV

- git clone -b release/10.x https://github.com/llvm/llvm-project.git llvm
- cd llvm
- mkdir build
- cd build
- export LLVM_HOME=$PWD/../drops
- cmake -G Ninja -DLLVM_ENABLE_PROJECTS="clang" -DBUILD_SHARED_LIBS=True -DLLVM_USE_SPLIT_DWARF=True -DCMAKE_INSTALL_PREFIX=$LLVM_HOME -DLLVM_OPTIMIZED_TABLEGEN=True -DLLVM_BUILD_TESTS=True -DDEFAULT_SYSROOT=$RISCV_GNU_TOOLS_PATH/riscv32-unknown-elf -DLLVM_DEFAULT_TARGET_TRIPLE="riscv32-unknown-elf" -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm
- cmake --build . --target install

## Sanity test your new RISC-V LLVM

- cat hello.c
#include <stdio.h>
int main(int argc, char **argv) { printf("hello world\n"); }
- clang hello.c
- qemu-riscv32 hello

## build pocl for Vortex

- git clone https://github.gatech.edu/casl/pocl.git
- cd pocl

- mkdir build_vortex_cc
- cd build_vortex_cc
- export POCL_CC_PATH=$PWD/../drops_vortex_cc
- export LLVM_HOME=~/dev/llvm-project/drops
- export VORTEX_RUNTIME_PATH=/home/blaise/dev/vortex_live/runtime
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_CC_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=ON -DWITH_LLVM_CONFIG=$LLVM_HOME/bin/llvm-config -DVORTEX_RUNTIME_PATH=$VORTEX_RUNTIME_PATH -DENABLE_VORTEX=ON -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON ..
- cmake --build . --target install

- mkdir build_vortex_rt
- cd build_vortex_rt
- export POCL_RT_PATH=$PWD/../drops_vortex_rt
- export VORTEX_DRIVER_INC=~/dev/vortex_live/driver/include
- export VORTEX_DRIVER_LIB=~/dev/vortex_live/driver/simx/libvortex.so
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_RT_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=OFF -DHOST_DEVICE_BUILD_HASH=riscv32-unknown-unknown-elf -DVORTEX_DRIVER_INC=$VORTEX_DRIVER_INC -DVORTEX_DRIVER_LIB=$VORTEX_DRIVER_LIB -DENABLE_VORTEX=ON -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON ..
- cmake --build . --target install
